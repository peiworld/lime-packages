#!/usr/bin/lua

local crc = require "crc16"
local uci = require "uci"
local util = require "util"
local iw = require "iwinfo"
local bit = require "BinDecHex"
local argv = arg
local x = uci.cursor()



-- LIST FUNCTIONS 
--  the rule is: return an array of strings containing in the first 
--  column the IP address and whatever or nothing after that

local function neigh_batadv()
	local c = io.popen("batctl o")
	local s = assert(x:get("wbm", "wireless", "ssid"))

	c:read("*l")
	c:read("*l")

	local l
	while true do
		l = c:read("*l")
		if not l then
			break
		end

		local q, a, i = l:match("^%S+ +%S+ +%((%d+)%) +(%S+) +%[ -(%S+)%]")
		if not (q and a and i) then
			break
		end

		local id = crc.hash(a)
		return util.sprintf("%17s	%6.2f%%	%8s	%s-%04x",			a, q / 255 * 100, i, s, id)
	end
end

function orig_bmx6()
	local nodes = util.lines(
		util.exec('bmx6 -c --originators | awk \'{print  $3,$1,$7}\''))
	return nodes
end

function neigh_bmx6()
	local nodes = util.lines(util.exec(
		'bmx6 -c --links | awk \'{print $2,$1,$3,$7}\''))
	return nodes
end

function neigh_olsr6()
	local nodes = util.lines(util.exec(
		'wget http://[::1]:2006/neigh -O - 2>/dev/null'))
	return nodes
end

function mac2ipv6(mac)

	-- split up mac into digits
	local bytes = util.split(mac, ":")
	-- prepend link-local prefix fe80::
	local ipv6 = "fe80::"
	-- xor leftmost w/ 0x02
	ipv6 = ipv6 .. bit.BMXOr(bytes[1], "02") .. ":"
	-- reformat to IPv6 notation
	ipv6 = ipv6 .. bytes[2] .. ":" .. bytes[3]
	-- throw ff:fe in the middle
	ipv6 = ipv6 .. "ff:fe" .. bytes[4] .. ":" .. bytes[5] .. bytes[6]

	return ipv6
end

function neigh_o11s()
	local neighbours = { }
	local o11sifs = x:get("wbm", "network", "o11s_ifs") or ""

	x:foreach("wireless", "wifi-iface", function(s)
		local iface = assert(x:get("wireless", s[".name"], "ifname"))
		local meshif = string.find(o11sifs, iface)
		if not meshif then return end
		local stas = util.lines(util.exec(
			'iw ' .. iface .. ' station dump | grep Station | cut -f2 -d" "'))
		for i=1, #stas do
			if stas[i]:len() < 17 then break end
			-- XXX: check for ESTAB
			neighbours[#neighbours+1] = mac2ipv6(stas[i])
		end
	end)

	return neighbours
end

function nodes_o11s()
	-- o11s has no knowledge of the entire 11s mesh, so ping the ipv6 mcast
	-- address and dump the mpath destinations, then translate those back
	-- to the wbm ip, bleh
	local nodes = { }
	local o11sifs = x:get("wbm", "network", "o11s_ifs") or ""

	x:foreach("wireless", "wifi-iface", function(s)
		local iface = assert(x:get("wireless", s[".name"], "ifname"))
		local meshif = string.find(o11sifs, iface) and iface
		if not meshif then return end
		-- generate mpaths
		util.exec('ping6 -L -c2 ff02::1%' .. meshif)
		local dsts = util.lines(util.exec(
			'iw ' .. iface .. ' mpath dump | awk \'{if (NR!=1) {print}}\' | cut -f1 -d" "'))

		for n=1, #dsts do
			-- last line is empty
			if dsts[n]:len() < 17 then break end
			nodes[n] = mac2ipv6(dsts[n])
		end
	end)

	return nodes
end

function links_olsr6()
	local links = util.lines(util.exec(
		'wget http://[::1]:2006/links -O - 2>/dev/null'))
	return links
end

function routes_olsr6()
	local routes = util.lines(util.exec(
		'wget http://[::1]:2006/route -O - 2>/dev/null'))
	return routes
end

-- List the neighbours (1 hop) nodes

local function list_neighbours(proto)
	local neighbours = {}
	if proto == "batadv" then neighbours = neigh_batadv() end
	if proto == "bmx6" then neighbours = neigh_bmx6() end
	if proto == "olsr" then neighbours = neigh_olsr6() end
	if proto == "o11s" then neighbours = neigh_o11s() end
	util.printable(neighbours)	
end

-- List the complete list of nodes

local function list_nodes(proto)
	local nodes = {}
	if proto == "batadv" then nodes = orig_batadv() end
	if proto == "bmx6" then nodes = orig_bmx6() end
	if proto == "olsr" then nodes = routes_olsr6() end
	if proto == "o11s" then nodes = nodes_o11s() end
	util.printable(nodes)	
end

-- List the links (1 hop) nodes (for most protocols same as neighbours

local function list_links(proto)
	local links = {}
	if proto == "olsr" then links = links_olsr6() end
	if proto == "bmx6" then links = neigh_bmx6() end
	util.printable(links)
end

-- EXPERIMENTS

local function net_perf(ipaddr)
	-- Runs an netperf client aimed at the supplied IP address and returns the raw throughput @ kilobits per second
	local throughput = io.popen("netperf -v 0 -f k -H "..ipaddr)
	tp = throughput:read("*a")
	raw = tp:match("^MIGRATED.*demo\n(.*)%s\n")

	if tp:match("%d+%.%d+") then
		return ("netPerf to " .. ipaddr .. " measured at " .. raw .. "k")
	else
		return ("NetPerf Error: " .. tp)
	end
end

local function throughput_test(ipaddr)
	if ipaddr then
	   print(net_perf(ipaddr))
	else
	   print("Please supply an ip address")
	end
end

local function traceroute(dest)
	print(util.exec('mtr ' .. dest .. ' --report-cycles=3 --raw'))
end

local function ping6(dest, interface)
	print(util.exec('ping6 -c 3 ' .. dest .. ' -I ' .. interface))
end

local function top()
	print(util.exec('top -b -n 1'))
end

local function help()
	print("list\n\tneigh\n\tnodes\n\tlinks\n\ntrace\nping6\ntop\nbw")
end

-- MAIN

local function main()
	if argv[1] == "list" or argv[1] == "l" then
	  if argv[2] == "neighbours" or argv[2] == "neigh" then list_neighbours(argv[3]) end
	  if argv[2] == "nodes" then list_nodes(argv[3]) end
	  if argv[2] == "links" then list_links(argv[3]) end
	end

	if argv[1] == "trace" then traceroute(argv[2]) end
	if argv[1] == "ping6" then ping6(argv[2], argv[3]) end
	if argv[1] == "top" then top() end
	if argv[1] == "bw" then throughput_test(argv[2]) end

	if argv[1] == nil or argv[1] == "help" then help() end		

end

main()

